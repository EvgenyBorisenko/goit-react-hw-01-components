{"version":3,"sources":["components/PricingItem/PricingItem.module.css","components/TransactionHistory/TransactionHistory.module.css","components/Profile/Profile.module.css","components/Stats/Stats.module.css","components/PricingPlan/PricingPlan.module.css","components/Profile/Profile.js","components/Stats/Stats.js","components/PricingItem/PricingItem.js","components/PricingPlan/PricingPlan.js","components/TransactionHistory/TransactionHistory.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Profile","propUser","name","tag","location","avatar","stats","followers","views","likes","className","style","container","photo","src","width","alt","info","Stats","title","map","el","item","key","id","label","percentage","defaultProps","PricingItem","price","pricingItem","icon","capacity","description","type","button","PricingPlan","items","content","TransactionHistory","transactionHistory","theadTransaction","tr","th","trContent","amount","currency","user","App","transactions","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.278cd9fb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pricingItem\":\"PricingItem_pricingItem__1jd-f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"transactionHistory\":\"TransactionHistory_transactionHistory__ostyx\",\"tr\":\"TransactionHistory_tr__2kLK9\",\"trContent\":\"TransactionHistory_trContent__uqjIx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Profile_container__1aEG8\",\"photo\":\"Profile_photo__1Ys_3\",\"info\":\"Profile_info__mXjAl\",\"name\":\"Profile_name__F8g49\",\"tag\":\"Profile_tag__AcTB-\",\"location\":\"Profile_location__2ugYm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Stats_container__3Bgdy\",\"stats\":\"Stats_stats__1cjVu\",\"title\":\"Stats_title__S-ooq\",\"item\":\"Stats_item__38-X-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"PricingPlan_content__2FN4S\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport style from './Profile.module.css';\n\nconst Profile = ({ propUser }) => {\n  const { name, tag, location, avatar, stats } = propUser;\n  const { followers, views, likes } = stats;\n\n  return (\n    <div className={style.container}>\n      <img className={style.photo} src={avatar} width=\"200px\" alt=\"some alt\" />\n      <h2 className={style.name}>{name}</h2>\n      <h3 className={style.tag}>{tag}</h3>\n      <h4 className={style.location}>{location}</h4>\n      <ul className={style.info}>\n        <li>followers {followers}</li>\n        <li>views {views}</li>\n        <li>likes {likes}</li>\n      </ul>\n    </div>\n  );\n};\n\nProfile.propTypes = {\n  propUser: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    tag: PropTypes.string.isRequired,\n    location: PropTypes.string.isRequired,\n    avatar: PropTypes.string.isRequired,\n    stats: PropTypes.shape({\n      followers: PropTypes.number.isRequired,\n      views: PropTypes.number.isRequired,\n      likes: PropTypes.number.isRequired,\n    }),\n  }).isRequired,\n};\n\nexport default Profile;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport style from './Stats.module.css';\n\nconst Stats = ({ stats, title }) => {\n  return (\n    <div className={style.container}>\n      <h2 className={style.title}>{title}</h2>\n      <ul className={style.stats}>\n        {stats.map(el => (\n          <li className={style.item} key={el.id}>\n            <span className={style.label}>{el.label}</span>\n            <span className={style.percentage}>{el.percentage}%</span>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nStats.defaultProps = {\n  title: '',\n};\n\nStats.propTypes = {\n  title: PropTypes.string,\n  stats: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      label: PropTypes.string.isRequired,\n      percentage: PropTypes.number.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n\nexport default Stats;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport style from './PricingItem.module.css';\n\nconst PricingItem = ({ item }) => {\n  return (\n    <li key={item.price} className={style.pricingItem}>\n      <img src={item.icon} alt=\"product\" className={style.icon} />\n      <h2 className={style.label}>{item.label}</h2>\n      <p className={style.capacity}>{item.capacity} STORAGE</p>\n      <p className={style.description}>{item.description}</p>\n      <p className={style.price}>${item.price}/MO</p>\n      <button type=\"button\" className={style.button}>\n        Get Started\n      </button>\n    </li>\n  );\n};\n\nPricingItem.propTypes = {\n  item: PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    icon: PropTypes.string.isRequired,\n    capacity: PropTypes.string.isRequired,\n    price: PropTypes.number.isRequired,\n    description: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default PricingItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PricingItem from '../PricingItem/PricingItem';\nimport style from './PricingPlan.module.css';\n\nconst PricingPlan = ({ items }) => {\n  return (\n    <ul className={style.content}>\n      {items.map(item => (\n        <PricingItem key={item.price} item={item} />\n      ))}\n    </ul>\n  );\n};\n\nPricingPlan.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.string.isRequired,\n      icon: PropTypes.string.isRequired,\n      capacity: PropTypes.string.isRequired,\n      price: PropTypes.number.isRequired,\n      description: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n\nexport default PricingPlan;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport style from './TransactionHistory.module.css';\n\nconst TransactionHistory = ({ items }) => {\n  return (\n    <table className={style.transactionHistory}>\n      <thead className={style.theadTransaction}>\n        <tr className={style.tr}>\n          <th className={style.th}>Type</th>\n          <th className={style.th}>Amount</th>\n          <th className={style.th}>Currency</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {items.map(item => (\n          <tr key={item.id} className={style.trContent}>\n            <td>{item.type}</td>\n            <td>{item.amount}</td>\n            <td>{item.currency}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nTransactionHistory.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      type: PropTypes.string.isRequired,\n      amount: PropTypes.string.isRequired,\n      currency: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n\nexport default TransactionHistory;\n","import React from 'react';\nimport Profile from './Profile/Profile';\nimport Stats from './Stats/Stats';\nimport PricingPlan from './PricingPlan/PricingPlan';\nimport pricingItem from './PricingItem/pricingItem.json';\nimport TransactionHistory from './TransactionHistory/TransactionHistory';\nimport transactions from './TransactionHistory/TransactionHistory.json';\n\nconst user = {\n  name: 'Jacques Gluke',\n  tag: '@jgluke',\n  location: 'Ocho Rios, Jamaica',\n  avatar:\n    'http://www.sobaka.ru/uploads/%D0%90%D0%BB%D0%B5%D0%BA%D1%81%D0%B0%D0%BD%D0%B4%D1%80%20%D0%9B%D0%B8%D1%82%D0%B2%D0%B8%D0%BD_%D0%BA%D1%80%D1%83%D0%B3%D0%BB%D0%B0%D1%8F%20%D0%B0%D0%B2%D0%B0%D1%82%D0%B0%D1%80%D0%BA%D0%B0.jpg',\n  stats: {\n    followers: 5603,\n    views: 4827,\n    likes: 1308,\n  },\n};\n\nconst stats = [\n  { id: 'id-1', label: '.docx', percentage: 22 },\n  { id: 'id-2', label: '.pdf', percentage: 4 },\n  { id: 'id-3', label: '.mp3', percentage: 17 },\n  { id: 'id-4', label: '.psd', percentage: 47 },\n  { id: 'id-5', label: '.pdf', percentage: 10 },\n];\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Profile propUser={user} />\n      <Stats title=\"Upload stats\" stats={stats} />\n      <PricingPlan items={pricingItem} />\n      <TransactionHistory items={transactions} />,\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}